@page "/listadoeventos"
@rendermode InteractiveServer //Es necesario si queremos que el componente sea interactivo
@inject EventoDeportivoListarUseCase EventoDeportivoListarUseCase
@inject EventoDeportivoModificacionUseCase EventoDeportivoModificacionUseCase
@inject EventoDeportivoBajaUseCase EventoDeportivoBajaUseCase
@inject ServicioLogin servicioLogin
@inject NavigationManager Navegador

<div class="text-center" style="padding-top: 30px;"><h3>Listado Eventos</h3></div>

<div style="margin: 30px;">
    <table class="table">
        <thead>
            <tr class="text-center">
                <th> Id </th>
                <th> Nombre </th> 
                <th> Descripcion </th> 
                <th> Fecha y Hora </th>
                <th> Duracion</th>
                <th> Cupo Maximo </th>
                <th> Responsable </th>
                <th> Asistencias </th>
                <th> Acciones </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in _lista) // Utilizamos la @ para cambiar de código HTML a C#
            {
                <tr class="text-center">
                    <td> @evento.Id </td>
                    <td> @evento.Nombre </td>
                    <td> @evento.Descripcion </td>
                    <td> @evento.FechaHoraInicio </td>
                    <td> @evento.DuracionHoras </td>
                    <td> @evento.CupoMaximo </td>
                    <td> @evento.ResponsableId </td>
                    <td> 
                        <button class="btn btn-outline-info mb-2" @onclick="()=>IrAListadoAsistencia(evento.Id)">Listar</button>
                    </td>
                    <td>
                        @if(servicioLogin.User != null){
                            if(servicioLogin.User.Permisos.Contains(Permiso.EventoModificacion)) 
                            {
                                <td><button class="btn btn-outline-primary" @onclick="()=>Editar(evento)">Editar</button></td>
                            }
                            if(servicioLogin.User.Permisos.Contains(Permiso.EventoBaja))
                            {
                                <td><button class="btn btn-outline-danger" @onclick="()=>ConfirmarEliminacion(evento)">Eliminar</button></td>
                                <DialogoConfirmacion @ref=dialogo OnConfirmado="Eliminar" Mensaje="@_mensajeDialogo"/>
                            }
                        }
                    </td>
                
                </tr>    
            }
        </tbody>
    </table>
    <button class="btn btn-outline-primary" @onclick="IrAEventosConCupo">Eventos con Cupo</button>
</div>


@if (!string.IsNullOrEmpty(MensajeError)) //muestra el mensaje de error en pantalla
{
    <div class="alert alert-danger">@MensajeError</div>
}

@code { // Sección de código C#
    private void IrAEventosConCupo()
    {
        Navegador.NavigateTo("/listadoEventosConCupo");
    }
    private void IrAListadoAsistencia(int EventoId)
    {
        Navegador.NavigateTo($"/listadoAsistenciaAEvento/{EventoId}");
    }
    List<EventoDeportivo> _lista = new List<EventoDeportivo>();
    [Parameter]
    public bool SoloLectura {get; set;} = false; 
     
    protected override void OnInitialized()
    {
        _lista = EventoDeportivoListarUseCase.Ejecutar();
    }
    DialogoConfirmacion dialogo = null!;
    EventoDeportivo? _EliminarEvento = null;
    string _mensajeDialogo = string.Empty;
    private void Editar(EventoDeportivo evento)
    {
        Navegador.NavigateTo($"evento/{evento.Id}");
    }
    private void ConfirmarEliminacion(EventoDeportivo evento)
    {
        _EliminarEvento = evento;
        _mensajeDialogo = $"¿Desea eliminar el evento {evento.Id} {evento.Nombre}?";
        dialogo.Mostrar();
    }
    string? MensajeError; 
    private void Eliminar()
    {
        try
        {
            if(_EliminarEvento != null && servicioLogin.User != null){
                EventoDeportivoBajaUseCase.Ejecutar(_EliminarEvento.Id, servicioLogin.User.Id); 
                _lista = EventoDeportivoListarUseCase.Ejecutar(); //Se actualiza la lista de eventos
                MensajeError = null; //Limpia el mensaje si todo sale bien
            }
        }
        catch (Exception ex)
        {
            MensajeError = ex.Message; //Guarda el mensaje de error
        }
    }
}

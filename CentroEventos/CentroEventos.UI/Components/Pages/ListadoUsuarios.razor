@page "/listadousuarios"
@rendermode InteractiveServer
@inject UsuarioListarUseCase usuarioListarUseCase
@inject UsuarioObtenerUseCase usuarioObtenerUseCase
@inject IJSRuntime JSRuntime;
@inject UsuarioBajaUseCase usuarioBajaUseCase
@inject NavigationManager Navegador
@inject ServicioLogin servicioLogin

<div class="text-center" style="padding-top: 30px;"><h3>Listado de Usuarios</h3></div>
<DialogoConfirmacion @ref="dialogo" OnConfirmado="Eliminar" Mensaje="@Mensaje"/>
<div style="margin: 30px;">
  <table class="table">
    <thead>
        <tr>
            <th>#</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Email</th>
            <th>Permisos</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var usuario in listaus ){
            <tr>
                <td>@usuario.Id </td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.Email</td>
                <td>
                    @foreach(var permiso in usuario.Permisos){ 
                        <div>@permiso</div>
                    }
                </td>
                <td>
                    @if(servicioLogin.User != null){
                        var userActual = servicioLogin.User;
                        if( (userActual.Id == usuario.Id) || (userActual.Permisos.Contains(Permiso.UsuarioModificacion) && (usuario.Id !=1 )))
                        {   
                            <td><button class="btn btn-outline-primary" @onclick="()=>ModificarUsuario(usuario)">Editar</button></td>
                        }
                        if(userActual.Permisos.Contains(Permiso.UsuarioBaja)){    
                            <td><button class="btn btn-outline-danger" @onclick="()=>ConfirmarEliminacion(usuario)">Eliminar</button></td>          
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
  </table>
</div>
@if (!string.IsNullOrEmpty(MensajeError)) //muestra el mensaje de error en pantalla
{
    <div class="alert alert-danger alert-mensaje">@MensajeError</div>
}
@code {
    List<Usuario> listaus = new List<Usuario>();
    protected override void OnInitialized()
    {
        if(servicioLogin.User != null) {
            if(servicioLogin.User.Permisos.Contains(Permiso.UsuarioBaja) || servicioLogin.User.Permisos.Contains(Permiso.UsuarioModificacion)){
                listaus = usuarioListarUseCase.Ejecutar();  
            } else {
                listaus.Add(usuarioObtenerUseCase.Ejecutar(servicioLogin.User.Id));
            } 
        }  
    }
    DialogoConfirmacion dialogo =null!;
    Usuario? _usEliminar = null;
    string Mensaje=string.Empty;
    private void ConfirmarEliminacion(Usuario usuario)
    {    
        _usEliminar = usuario;
        Mensaje = $"Desea Eliminar al usuario {usuario.Nombre} {usuario.Apellido }?";
        dialogo.Mostrar();
    }
    string? MensajeError; 
    private void Eliminar()
    {
        try
        {
            if (_usEliminar != null && servicioLogin.User != null)
            {   
                if(_usEliminar.Id != 1) {
                    usuarioBajaUseCase.Ejecutar(_usEliminar.Id, servicioLogin.User.Id);
                    listaus = usuarioListarUseCase.Ejecutar();
                    MensajeError = null; //Limpia el mensaje si todo sale bien
                }
                else {
                    MensajeError = "No puede eliminar al administrador";
                }
            }
        }
        catch (Exception ex)
        {
            MensajeError = ex.Message; //Guarda el mensaje de error
        }
    }

    void ModificarUsuario(Usuario usuario)
    {
        Navegador.NavigateTo($"usuario/{usuario.Id}");
    }
}
@page "/login"
@rendermode InteractiveServer
@inject ServicioLogin servicioLogin
@inject NavigationManager navegador
@inject UsuarioRegistrarUseCase usuarioRegistrarUseCase
@inject UsuarioObtenerUseCase usuarioObtenerUseCase


<div class="text-center" style="padding-top: 30px;"><h1>Centro Deportivo Universitario</h1></div>

<div class="container-fluid justify-content-center align-items-center min-vh-100 p-5" style="max-width: 900px;">
    <div class="text-center border p-4 rounded shadow-sm bg-light" >
        @if(!visible)
        {
            <div class="mb-3">
                <input placeholder="Email" @bind="_Email" class="form-control w-70 mb-2">
                <input type="password" placeholder="Contraseña" @bind="_Contraseña" class="form-control w-70 mb-2">
            </div>
            <button class="btn btn-outline-info mb-2" @onclick="()=>InicioSesion(_Email,_Contraseña)">Iniciar Sesion</button>
            <button class="btn btn-outline-primary mb-2" @onclick="()=>Registrar()"> Registrar</button>
        } else {
            <div class="mb-3">
                <input placeholder="Nombre" @bind="_usuarioAct.Nombre" class="form-control w-70 mb-2 ">
                <input placeholder="Apellido" @bind="_usuarioAct.Apellido" class="form-control w-70 mb-2">
                <input placeholder="Email" @bind="_usuarioAct.Email" class="form-control w-70 mb-2">
                <input type="password" placeholder="Contraseña" @bind="_usuarioAct.Contraseña" class="form-control w-70 mb-2">
            </div>
            <button class="btn btn-outline-primary" @onclick="()=>RegistrarUsuario(_usuarioAct)"> Registrar</button>
            <button class="btn btn-outline-secondary me-2" @onclick="Cancelar">Cancelar</button>
        }
    </div>
    @if (!string.IsNullOrEmpty(MensajeError)) //muestra el mensaje de error en pantalla
    {
        <div class="alert alert-danger">@MensajeError</div>
    }   
</div>  

@code{
    Usuario _usuarioAct=null!;
    string _Email= string.Empty;
    string _Contraseña = string.Empty;
    public bool visible = false;
    string? MensajeError; 
    public async Task InicioSesion(string email, string contraseña)
    {   
        try
        {
            _usuarioAct = await Task.Run(()=> servicioLogin.RecuperarUsuario(email, contraseña));
            MensajeError = null; //Limpia el mensaje si todo sale bien
        }
        catch (Exception ex)
        {
            MensajeError = ex.Message; //Guarda el mensaje de error
        }
        if(MensajeError == null)
        {
            navegador.NavigateTo("listadousuarios");
        }
    }
    public void Registrar()
    {
        _usuarioAct = new Usuario();
        visible = true;
        StateHasChanged(); //fuerza el render
    }
    public void RegistrarUsuario(Usuario usuario){

        string email = usuario.Email ?? string.Empty;
        string contraseña = usuario.Contraseña ?? string.Empty;
        try
        {
            usuarioRegistrarUseCase.Ejecutar(usuario,true); // carga al nuevo usuario en la base de datos
            _usuarioAct= servicioLogin.RecuperarUsuario(email,contraseña); //se recupera el usuario
            MensajeError = null; //Limpia el mensaje si todo sale bien
        }
        catch (Exception ex)
        {
            MensajeError = ex.Message; //Guarda el mensaje de error
        }
        if(MensajeError == null)
        {
            navegador.NavigateTo("listadousuarios");
        }
    }
    public void Cancelar(){
        MensajeError = null;
        visible = false;
        StateHasChanged();
    }
}   